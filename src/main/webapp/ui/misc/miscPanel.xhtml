<ui:composition
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:f="http://java.sun.com/jsf/core"
    xmlns:p="http://primefaces.org/ui">
    <p:panel
        header="Misc"
        toggleable="true"
        toggleSpeed="500">
        <h:form id="formMisc">
            <p:commandButton
                value="Responsive"
                id="commandButtonResponsive"
                action="ui/misc/responsive?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipResponsive"
                for="commandButtonResponsive"
                value="In combination with Grid CSS, ui-fluid style class provides 
                 fluid width for efficient use of space in screen. This example demonstrates
                 ui-fluid in combination with the components having built-in responsive modes."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="BlockUI"
                id="commandButtonBlockUI"
                action="ui/misc/blockUI?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipBlockUI"
                for="commandButtonBlockUI"
                value="BlockUI blocks other components. It can be used with 
                special ajax integration or manually with client side api."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="Cache"
                id="commandButtonCache"
                action="ui/misc/cache?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipCache"
                for="commandButtonCache"
                value="Cache component is used to reduce page load time by caching the content 
                in a global cache after the initial rendering. Various cache providers are supported 
                like ehcache and hazelcast. In this example, toolbar component is cached and output 
                would be retrieved from cache."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="Captcha"
                id="commandButtonCaptcha"
                action="ui/misc/captcha?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipCaptcha"
                for="commandButtonCaptcha"
                value="Captcha is based on reCAPTCHA API."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="Clock"
                id="commandButtonClock"
                action="ui/misc/clock?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipClock"
                for="commandButtonClock"
                value="Clock displays server or client datetime live. AutoSync feature 
                in server mode can sync the clock with server periodically."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="Collector"
                id="commandButtonCollector"
                action="ui/misc/collector?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipCollector"
                for="commandButtonCollector"
                value="Collector is an utility to manage collections easily."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="DefaultCommand"
                id="commandButtonDefaultCommand"
                action="ui/misc/defaultCommand?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipDefaultCommand"
                for="commandButtonDefaultCommand"
                value="DefaultCommand controls which command to initiate form submit with when enter 
                key is pressed. Example below demonstrates 3 types of buttons; non-ajax, ajax and standard. 
                Multiple defaultCommand in same form is supported with scope option."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="Effect"
                id="commandButtonEffect"
                action="ui/misc/effect?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipEffect"
                for="commandButtonEffect"
                value="Effect is attached to a particular event of a target."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="ExceptionHandler"
                id="commandButtonExceptionHandler"
                action="ui/misc/exceptionHandler?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipExceptionHandler"
                for="commandButtonExceptionHandler"
                value="PrimeFaces provides a powerful ExceptionHandler out of the box featuring support 
                for ajax and non-ajax requests, ability to use error-page configuration in web.xml, an EL 
                extension called to provide information about the exception and the p:ajaxExceptionHandler 
                component to handle ajax exceptions at the same page."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="FontAwesome"
                id="commandButtonFontAwesome"
                action="ui/misc/fa?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipFontAwesome"
                for="commandButtonFontAwesome"
                value="Font Awesome is a highly customizable scalable vector iconset with 479 icons. 
                In addition to the default ThemeRoller icons, Font Awesome icons are provided out of 
                the box within PrimeFaces. In order to enable Font Awesome support, enable primefaces.
                FONT_AWESOME setting as true via a context param."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="FeedReader"
                id="commandButtonFeedReader"
                action="ui/misc/feedReader?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipFeedReader"
                for="commandButtonFeedReader"
                value="FeedReader retrieves and displays content from a feed."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="Focus"
                id="commandButtonFocus"
                action="ui/misc/focus?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipFocus"
                for="commandButtonFocus"
                value="Focus manages element focus in forms. By default first visible and enabled 
                input element(e.g. text, textarea, select) is chosen to receive focus automatically. 
                It is also possible to explicitly declare the component to receive focus via the 
                for attribute. Focus is also aware of failed validations, first invalid 
                input component receives a focus automatically."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="Hotkey"
                id="commandButtonHotkey"
                action="ui/misc/hotkey?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipHotkey"
                for="commandButtonHotkey"
                value="Hotkey is used to bind a key or a key combination to an client side or server 
                side event via ajax. In first example use 'left' and 'right' keys to switch images 
                and in second example you can do an ajax request with the (ctrl+shift+s) combination."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="IdleMonitor"
                id="commandButtonIdleMonitor"
                action="ui/misc/idleMonitor?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipIdleMonitor"
                for="commandButtonIdleMonitor"
                value="IdleMonitor tracks user actions and invokes corresponding events when 
                user goes idle after a specified time and becomes active again."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="ImportConstants"
                id="commandButtonImportConstants"
                action="ui/misc/importConstants?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipImportConstants"
                for="commandButtonImportConstants"
                value="In older EL versions (&lt; 3.0), it's not possible to use constants or any 
                other static fields/methods in an EL expression. As it is not really 'cool' to 
                create beans with getter/setter for each constants class, we provide an utils 
                tag which allows to import constant fields in a page.
                The constants can be accessed via the name of the class (default setting) 
                or via a custom name (var attribute)."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="ImportEnum"
                id="commandButtonImportEnum"
                action="ui/misc/importEnum?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipImportEnum"
                for="commandButtonImportEnum"
                value="In older EL versions (&lt; 3.0), it's not possible to use enum constants or 
                any other static fields/methods in an EL expression. As it is not really 'cool' to create 
                beans with getter/setter for each constants class, we provide an utils tag which allows to 
                import enum values in a page. The enum values can be accessed via the name of the class 
                (default setting) or via a custom name (var attribute). It also possible to get all enum values 
                of the class with the 'ALL_VALUES' suffix or a custom prefix via the 'allSuffix' attribute."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="Lifecycle"
                id="commandButtonLifecycle"
                action="ui/misc/lifecycle?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipLifecycle"
                for="commandButtonLifecycle"
                value="Lifecycle is a utility component which displays the execution time of each JSF phase. 
                It also synchronizes automatically after each AJAX request."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="Log"
                id="commandButtonLog"
                action="ui/misc/log?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipLog"
                for="commandButtonLog"
                value="Log component is a visual console to display internal logs of PrimeFaces. 
                Using log client side API, you can also use the component."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="OutputLabel"
                id="commandButtonOutputLabel"
                action="ui/misc/outputLabel?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipOutputLabel"
                for="commandButtonOutputLabel"
                value="OutputLabel is an extension to standard outputLabel component. Extended features are;
                OutputLabel sets its value as the label of the target component to be displayed in validation 
                errors so that target component does not need to define label attribute again. Support for components with 
                non-trivial markup like spinner, autocomplete, calendar and so on which are not supported by standard outputLabel.
                Theme aware error styling when associated component is not valid. Required field indicator."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="Printer"
                id="commandButtonPrinter"
                action="ui/misc/printer?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipPrinter"
                for="commandButtonPrinter"
                value="Printer is used to print a certain component instead of the whole page."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="ProgressBar"
                id="commandButtonProgressBar"
                action="ui/misc/progressBar?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipProgressBar"
                for="commandButtonProgressBar"
                value="ProgressBar is a process status indicator that can either work on 
                client side or integrate with server side via ajax."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="RequestContext"
                id="commandButtonRequestContext"
                action="ui/misc/requestContext?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipRequestContext"
                for="commandButtonRequestContext"
                value="RequestContext is a helper with various utilities. Update component(s) programmatically. Execute javascript from beans.
                Add ajax callback parameters as JSON. ScrollTo a specific component after ajax update. Invoke conditional javascript on page load."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
            <p:commandButton
                value="ResetInput"
                id="commandButtonResetInput"
                action="ui/misc/resetInput?faces-redirect=true"
                styleClass="ui-priority-primary" />
            <p:tooltip
                id="tooltipResetInput"
                for="commandButtonResetInput"
                value="Input components keep their local values at state when validation fails. ResetInput is used to clear the cached 
                values from state so that components retrieve their values from the backing bean model instead."
                showEffect="clip"
                hideEffect="explode"
                trackMouse="true" />
        </h:form>
    </p:panel>
</ui:composition>